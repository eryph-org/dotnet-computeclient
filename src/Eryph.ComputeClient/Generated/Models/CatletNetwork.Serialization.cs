// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Eryph.ComputeClient;

namespace Eryph.ComputeClient.Models
{
    public partial class CatletNetwork
    {
        internal static CatletNetwork DeserializeCatletNetwork(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            string provider = default;
            IReadOnlyList<string> ipV4Addresses = default;
            string iPv4DefaultGateway = default;
            IReadOnlyList<string> dnsServerAddresses = default;
            IReadOnlyList<string> ipV4Subnets = default;
            FloatingNetworkPort floatingPort = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        name = null;
                        continue;
                    }
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provider"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        provider = null;
                        continue;
                    }
                    provider = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipV4Addresses"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    ipV4Addresses = array;
                    continue;
                }
                if (property.NameEquals("iPv4DefaultGateway"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        iPv4DefaultGateway = null;
                        continue;
                    }
                    iPv4DefaultGateway = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dnsServerAddresses"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    dnsServerAddresses = array;
                    continue;
                }
                if (property.NameEquals("ipV4Subnets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    ipV4Subnets = array;
                    continue;
                }
                if (property.NameEquals("floatingPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    floatingPort = FloatingNetworkPort.DeserializeFloatingNetworkPort(property.Value);
                    continue;
                }
            }
            return new CatletNetwork(
                name,
                provider,
                ipV4Addresses ?? new ChangeTrackingList<string>(),
                iPv4DefaultGateway,
                dnsServerAddresses ?? new ChangeTrackingList<string>(),
                ipV4Subnets ?? new ChangeTrackingList<string>(),
                floatingPort);
        }
    }
}
