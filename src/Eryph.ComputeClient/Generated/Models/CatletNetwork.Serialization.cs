// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Eryph.ComputeClient.Models
{
    public partial class CatletNetwork
    {
        internal static CatletNetwork DeserializeCatletNetwork(JsonElement element)
        {
            Optional<string> name = default;
            Optional<string> provider = default;
            Optional<IReadOnlyList<string>> ipV4Addresses = default;
            Optional<IReadOnlyList<string>> ipV6Addresses = default;
            Optional<string> iPv4DefaultGateway = default;
            Optional<string> iPv6DefaultGateway = default;
            Optional<IReadOnlyList<string>> dnsServerAddresses = default;
            Optional<IReadOnlyList<string>> ipV4Subnets = default;
            Optional<IReadOnlyList<string>> ipV6Subnets = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        name = null;
                        continue;
                    }
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provider"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        provider = null;
                        continue;
                    }
                    provider = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipV4Addresses"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        ipV4Addresses = null;
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    ipV4Addresses = array;
                    continue;
                }
                if (property.NameEquals("ipV6Addresses"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        ipV6Addresses = null;
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    ipV6Addresses = array;
                    continue;
                }
                if (property.NameEquals("iPv4DefaultGateway"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        iPv4DefaultGateway = null;
                        continue;
                    }
                    iPv4DefaultGateway = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("iPv6DefaultGateway"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        iPv6DefaultGateway = null;
                        continue;
                    }
                    iPv6DefaultGateway = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dnsServerAddresses"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dnsServerAddresses = null;
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    dnsServerAddresses = array;
                    continue;
                }
                if (property.NameEquals("ipV4Subnets"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        ipV4Subnets = null;
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    ipV4Subnets = array;
                    continue;
                }
                if (property.NameEquals("ipV6Subnets"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        ipV6Subnets = null;
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    ipV6Subnets = array;
                    continue;
                }
            }
            return new CatletNetwork(name.Value, provider.Value, Optional.ToList(ipV4Addresses), Optional.ToList(ipV6Addresses), iPv4DefaultGateway.Value, iPv6DefaultGateway.Value, Optional.ToList(dnsServerAddresses), Optional.ToList(ipV4Subnets), Optional.ToList(ipV6Subnets));
        }
    }
}
