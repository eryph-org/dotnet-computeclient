// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Eryph.ComputeClient.Models
{
    /// <summary> The Catlet. </summary>
    public partial class Catlet
    {
        /// <summary> Initializes a new instance of <see cref="Catlet"/>. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="vmId"> The ID of the corresponding Hyper-V virtual machine. </param>
        /// <param name="project"></param>
        /// <param name="status"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="name"/>, <paramref name="vmId"/> or <paramref name="project"/> is null. </exception>
        internal Catlet(string id, string name, string vmId, Project project, CatletStatus status)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(vmId, nameof(vmId));
            Argument.AssertNotNull(project, nameof(project));

            Id = id;
            Name = name;
            VmId = vmId;
            Project = project;
            Status = status;
            Networks = new ChangeTrackingList<CatletNetwork>();
            NetworkAdapters = new ChangeTrackingList<CatletNetworkAdapter>();
            Drives = new ChangeTrackingList<CatletDrive>();
        }

        /// <summary> Initializes a new instance of <see cref="Catlet"/>. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="vmId"> The ID of the corresponding Hyper-V virtual machine. </param>
        /// <param name="project"></param>
        /// <param name="status"></param>
        /// <param name="networks"></param>
        /// <param name="networkAdapters"></param>
        /// <param name="drives"></param>
        internal Catlet(string id, string name, string vmId, Project project, CatletStatus status, IReadOnlyList<CatletNetwork> networks, IReadOnlyList<CatletNetworkAdapter> networkAdapters, IReadOnlyList<CatletDrive> drives)
        {
            Id = id;
            Name = name;
            VmId = vmId;
            Project = project;
            Status = status;
            Networks = networks;
            NetworkAdapters = networkAdapters;
            Drives = drives;
        }

        /// <summary> Gets the id. </summary>
        public string Id { get; }
        /// <summary> Gets the name. </summary>
        public string Name { get; }
        /// <summary> The ID of the corresponding Hyper-V virtual machine. </summary>
        public string VmId { get; }
        /// <summary> Gets the project. </summary>
        public Project Project { get; }
        /// <summary> Gets the status. </summary>
        public CatletStatus Status { get; }
        /// <summary> Gets the networks. </summary>
        public IReadOnlyList<CatletNetwork> Networks { get; }
        /// <summary> Gets the network adapters. </summary>
        public IReadOnlyList<CatletNetworkAdapter> NetworkAdapters { get; }
        /// <summary> Gets the drives. </summary>
        public IReadOnlyList<CatletDrive> Drives { get; }
    }
}
