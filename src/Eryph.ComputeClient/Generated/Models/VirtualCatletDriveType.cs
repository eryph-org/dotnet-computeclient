// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Eryph.ComputeClient.Models
{
    /// <summary> The VirtualCatletDriveType. </summary>
    public readonly partial struct VirtualCatletDriveType : IEquatable<VirtualCatletDriveType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VirtualCatletDriveType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VirtualCatletDriveType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string VHDValue = "VHD";
        private const string SharedVHDValue = "SharedVHD";
        private const string PHDValue = "PHD";
        private const string DVDValue = "DVD";

        /// <summary> VHD. </summary>
        public static VirtualCatletDriveType VHD { get; } = new VirtualCatletDriveType(VHDValue);
        /// <summary> SharedVHD. </summary>
        public static VirtualCatletDriveType SharedVHD { get; } = new VirtualCatletDriveType(SharedVHDValue);
        /// <summary> PHD. </summary>
        public static VirtualCatletDriveType PHD { get; } = new VirtualCatletDriveType(PHDValue);
        /// <summary> DVD. </summary>
        public static VirtualCatletDriveType DVD { get; } = new VirtualCatletDriveType(DVDValue);
        /// <summary> Determines if two <see cref="VirtualCatletDriveType"/> values are the same. </summary>
        public static bool operator ==(VirtualCatletDriveType left, VirtualCatletDriveType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VirtualCatletDriveType"/> values are not the same. </summary>
        public static bool operator !=(VirtualCatletDriveType left, VirtualCatletDriveType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="VirtualCatletDriveType"/>. </summary>
        public static implicit operator VirtualCatletDriveType(string value) => new VirtualCatletDriveType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VirtualCatletDriveType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VirtualCatletDriveType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
