// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Eryph.ComputeClient.Models
{
    /// <summary> The VirtualDisk. </summary>
    public partial class VirtualDisk
    {
        /// <summary> Initializes a new instance of <see cref="VirtualDisk"/>. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="location"></param>
        /// <param name="dataStore"></param>
        /// <param name="project"></param>
        /// <param name="environment"></param>
        /// <param name="status"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="name"/>, <paramref name="location"/>, <paramref name="dataStore"/>, <paramref name="project"/> or <paramref name="environment"/> is null. </exception>
        internal VirtualDisk(string id, string name, string location, string dataStore, Project project, string environment, DiskStatus status)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(location, nameof(location));
            Argument.AssertNotNull(dataStore, nameof(dataStore));
            Argument.AssertNotNull(project, nameof(project));
            Argument.AssertNotNull(environment, nameof(environment));

            Id = id;
            Name = name;
            Location = location;
            DataStore = dataStore;
            Project = project;
            Environment = environment;
            Status = status;
            AttachedCatlets = new ChangeTrackingList<VirtualDiskAttachedCatlet>();
        }

        /// <summary> Initializes a new instance of <see cref="VirtualDisk"/>. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="location"></param>
        /// <param name="dataStore"></param>
        /// <param name="project"></param>
        /// <param name="environment"></param>
        /// <param name="status"></param>
        /// <param name="gene"></param>
        /// <param name="path">
        /// The file system path of the virtual disk. This information
        /// is only available to administrators.
        /// </param>
        /// <param name="sizeBytes"></param>
        /// <param name="parentId"> The ID of the parent disk when this disk is a differential disk. </param>
        /// <param name="parentPath">
        /// The file system path of the virtual disk's parent. This information
        /// is only available to administrators. The ParentPath might be populated
        /// even if the ParentId is missing. In this case, the disk chain is corrupted.
        /// </param>
        /// <param name="attachedCatlets"></param>
        internal VirtualDisk(string id, string name, string location, string dataStore, Project project, string environment, DiskStatus status, VirtualDiskGeneInfo gene, string path, long? sizeBytes, string parentId, string parentPath, IReadOnlyList<VirtualDiskAttachedCatlet> attachedCatlets)
        {
            Id = id;
            Name = name;
            Location = location;
            DataStore = dataStore;
            Project = project;
            Environment = environment;
            Status = status;
            Gene = gene;
            Path = path;
            SizeBytes = sizeBytes;
            ParentId = parentId;
            ParentPath = parentPath;
            AttachedCatlets = attachedCatlets;
        }

        /// <summary> Gets the id. </summary>
        public string Id { get; }
        /// <summary> Gets the name. </summary>
        public string Name { get; }
        /// <summary> Gets the location. </summary>
        public string Location { get; }
        /// <summary> Gets the data store. </summary>
        public string DataStore { get; }
        /// <summary> Gets the project. </summary>
        public Project Project { get; }
        /// <summary> Gets the environment. </summary>
        public string Environment { get; }
        /// <summary> Gets the status. </summary>
        public DiskStatus Status { get; }
        /// <summary> Gets the gene. </summary>
        public VirtualDiskGeneInfo Gene { get; }
        /// <summary>
        /// The file system path of the virtual disk. This information
        /// is only available to administrators.
        /// </summary>
        public string Path { get; }
        /// <summary> Gets the size bytes. </summary>
        public long? SizeBytes { get; }
        /// <summary> The ID of the parent disk when this disk is a differential disk. </summary>
        public string ParentId { get; }
        /// <summary>
        /// The file system path of the virtual disk's parent. This information
        /// is only available to administrators. The ParentPath might be populated
        /// even if the ParentId is missing. In this case, the disk chain is corrupted.
        /// </summary>
        public string ParentPath { get; }
        /// <summary> Gets the attached catlets. </summary>
        public IReadOnlyList<VirtualDiskAttachedCatlet> AttachedCatlets { get; }
    }
}
