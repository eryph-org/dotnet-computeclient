// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Eryph.ComputeClient.Models
{
    /// <summary> The FloatingNetworkPort. </summary>
    public partial class FloatingNetworkPort
    {
        /// <summary> Initializes a new instance of <see cref="FloatingNetworkPort"/>. </summary>
        /// <param name="name"></param>
        /// <param name="provider"></param>
        /// <param name="subnet"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="provider"/> or <paramref name="subnet"/> is null. </exception>
        internal FloatingNetworkPort(string name, string provider, string subnet)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(provider, nameof(provider));
            Argument.AssertNotNull(subnet, nameof(subnet));

            Name = name;
            Provider = provider;
            Subnet = subnet;
            IpV4Addresses = new ChangeTrackingList<string>();
            IpV4Subnets = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="FloatingNetworkPort"/>. </summary>
        /// <param name="name"></param>
        /// <param name="provider"></param>
        /// <param name="subnet"></param>
        /// <param name="ipV4Addresses"></param>
        /// <param name="ipV4Subnets"></param>
        internal FloatingNetworkPort(string name, string provider, string subnet, IReadOnlyList<string> ipV4Addresses, IReadOnlyList<string> ipV4Subnets)
        {
            Name = name;
            Provider = provider;
            Subnet = subnet;
            IpV4Addresses = ipV4Addresses;
            IpV4Subnets = ipV4Subnets;
        }

        /// <summary> Gets the name. </summary>
        public string Name { get; }
        /// <summary> Gets the provider. </summary>
        public string Provider { get; }
        /// <summary> Gets the subnet. </summary>
        public string Subnet { get; }
        /// <summary> Gets the ip v 4 addresses. </summary>
        public IReadOnlyList<string> IpV4Addresses { get; }
        /// <summary> Gets the ip v 4 subnets. </summary>
        public IReadOnlyList<string> IpV4Subnets { get; }
    }
}
