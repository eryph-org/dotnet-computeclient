// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Eryph.ComputeClient.Models
{
    /// <summary> The CatletNetwork. </summary>
    public partial class CatletNetwork
    {
        /// <summary> Initializes a new instance of <see cref="CatletNetwork"/>. </summary>
        internal CatletNetwork()
        {
            IpV4Addresses = new ChangeTrackingList<string>();
            DnsServerAddresses = new ChangeTrackingList<string>();
            IpV4Subnets = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="CatletNetwork"/>. </summary>
        /// <param name="name"></param>
        /// <param name="provider"></param>
        /// <param name="ipV4Addresses"></param>
        /// <param name="iPv4DefaultGateway"></param>
        /// <param name="dnsServerAddresses"></param>
        /// <param name="ipV4Subnets"></param>
        /// <param name="floatingPort"></param>
        internal CatletNetwork(string name, string provider, IReadOnlyList<string> ipV4Addresses, string iPv4DefaultGateway, IReadOnlyList<string> dnsServerAddresses, IReadOnlyList<string> ipV4Subnets, FloatingNetworkPort floatingPort)
        {
            Name = name;
            Provider = provider;
            IpV4Addresses = ipV4Addresses;
            IPv4DefaultGateway = iPv4DefaultGateway;
            DnsServerAddresses = dnsServerAddresses;
            IpV4Subnets = ipV4Subnets;
            FloatingPort = floatingPort;
        }

        /// <summary> Gets the name. </summary>
        public string Name { get; }
        /// <summary> Gets the provider. </summary>
        public string Provider { get; }
        /// <summary> Gets the ip v 4 addresses. </summary>
        public IReadOnlyList<string> IpV4Addresses { get; }
        /// <summary> Gets the i pv 4 default gateway. </summary>
        public string IPv4DefaultGateway { get; }
        /// <summary> Gets the dns server addresses. </summary>
        public IReadOnlyList<string> DnsServerAddresses { get; }
        /// <summary> Gets the ip v 4 subnets. </summary>
        public IReadOnlyList<string> IpV4Subnets { get; }
        /// <summary> Gets the floating port. </summary>
        public FloatingNetworkPort FloatingPort { get; }
    }
}
