// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Eryph.ComputeClient.Models;

namespace Eryph.ComputeClient
{
    /// <summary> The Operations service client. </summary>
    public partial class OperationsClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal OperationsRestClient RestClient { get; }

        /// <summary> Initializes a new instance of OperationsClient for mocking. </summary>
        protected OperationsClient()
        {
        }

        /// <summary> Initializes a new instance of OperationsClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        internal OperationsClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new OperationsRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Get an operation. </summary>
        /// <param name="id"> The <see cref="string"/> to use. </param>
        /// <param name="logTimeStamp"> The <see cref="DateTimeOffset"/>? to use. </param>
        /// <param name="expand"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Models.Operation>> GetAsync(string id, DateTimeOffset? logTimeStamp = null, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("OperationsClient.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(id, logTimeStamp, expand, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get an operation. </summary>
        /// <param name="id"> The <see cref="string"/> to use. </param>
        /// <param name="logTimeStamp"> The <see cref="DateTimeOffset"/>? to use. </param>
        /// <param name="expand"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Models.Operation> Get(string id, DateTimeOffset? logTimeStamp = null, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("OperationsClient.Get");
            scope.Start();
            try
            {
                return RestClient.Get(id, logTimeStamp, expand, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all operations. </summary>
        /// <param name="logTimeStamp"> The <see cref="DateTimeOffset"/>? to use. </param>
        /// <param name="expand"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Models.Operation> ListAsync(DateTimeOffset? logTimeStamp = null, string expand = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => RestClient.CreateListRequest(logTimeStamp, expand);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, null, Models.Operation.DeserializeOperation, _clientDiagnostics, _pipeline, "OperationsClient.List", "value", null, cancellationToken);
        }

        /// <summary> List all operations. </summary>
        /// <param name="logTimeStamp"> The <see cref="DateTimeOffset"/>? to use. </param>
        /// <param name="expand"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Models.Operation> List(DateTimeOffset? logTimeStamp = null, string expand = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => RestClient.CreateListRequest(logTimeStamp, expand);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, null, Models.Operation.DeserializeOperation, _clientDiagnostics, _pipeline, "OperationsClient.List", "value", null, cancellationToken);
        }
    }
}
