// <auto-generated>
// MIT
// </auto-generated>

namespace Eryph.ComputeClient
{
    using Eryph.ClientRuntime;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MachinesOperations.
    /// </summary>
    public static partial class MachinesOperationsExtensions
    {
            /// <summary>
            /// Creates a new Machine
            /// </summary>
            /// <remarks>
            /// Creates a Machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Operation Create(this IMachinesOperations operations, NewMachineRequest body = default(NewMachineRequest))
            {
                return operations.CreateAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Machine
            /// </summary>
            /// <remarks>
            /// Creates a Machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Operation> CreateAsync(this IMachinesOperations operations, NewMachineRequest body = default(NewMachineRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all Machines
            /// </summary>
            /// <remarks>
            /// List all Machines
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// </param>
            public static Eryph.ClientRuntime.IPage<Machine> List(this IMachinesOperations operations, bool? count = default(bool?))
            {
                return operations.ListAsync(count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all Machines
            /// </summary>
            /// <remarks>
            /// List all Machines
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Eryph.ClientRuntime.IPage<Machine>> ListAsync(this IMachinesOperations operations, bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Machine
            /// </summary>
            /// <remarks>
            /// Deletes a Machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Operation Delete(this IMachinesOperations operations, string id)
            {
                return operations.DeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Machine
            /// </summary>
            /// <remarks>
            /// Deletes a Machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Operation> DeleteAsync(this IMachinesOperations operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a Machines
            /// </summary>
            /// <remarks>
            /// Get a Machines
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Machine Get(this IMachinesOperations operations, string id)
            {
                return operations.GetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Machines
            /// </summary>
            /// <remarks>
            /// Get a Machines
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Machine> GetAsync(this IMachinesOperations operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a Machine
            /// </summary>
            /// <remarks>
            /// Updates a Machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Operation Update(this IMachinesOperations operations, string id, System.Guid body)
            {
                return operations.UpdateAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a Machine
            /// </summary>
            /// <remarks>
            /// Updates a Machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Operation> UpdateAsync(this IMachinesOperations operations, string id, System.Guid body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts a Machine
            /// </summary>
            /// <remarks>
            /// Starts a Machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Operation Start(this IMachinesOperations operations, string id)
            {
                return operations.StartAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts a Machine
            /// </summary>
            /// <remarks>
            /// Starts a Machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Operation> StartAsync(this IMachinesOperations operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stops a Machine
            /// </summary>
            /// <remarks>
            /// Stops a Machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Operation Stop(this IMachinesOperations operations, string id)
            {
                return operations.StopAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops a Machine
            /// </summary>
            /// <remarks>
            /// Stops a Machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Operation> StopAsync(this IMachinesOperations operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all Machines
            /// </summary>
            /// <remarks>
            /// List all Machines
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Eryph.ClientRuntime.IPage<Machine> ListNext(this IMachinesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all Machines
            /// </summary>
            /// <remarks>
            /// List all Machines
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Eryph.ClientRuntime.IPage<Machine>> ListNextAsync(this IMachinesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
