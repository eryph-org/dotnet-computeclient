// <auto-generated>
// MIT
// </auto-generated>

namespace Haipa.ComputeClient.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Machine
    {
        /// <summary>
        /// Initializes a new instance of the Machine class.
        /// </summary>
        public Machine()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Machine class.
        /// </summary>
        /// <param name="status">Possible values include: 'Stopped', 'Running',
        /// 'Pending', 'Error'</param>
        public Machine(System.Guid? id = default(System.Guid?), string name = default(string), Agent agent = default(Agent), string agentName = default(string), string status = default(string), VirtualMachine vm = default(VirtualMachine), IList<MachineNetwork> networks = default(IList<MachineNetwork>))
        {
            Id = id;
            Name = name;
            Agent = agent;
            AgentName = agentName;
            Status = status;
            Vm = vm;
            Networks = networks;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "agent")]
        public Agent Agent { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "agentName")]
        public string AgentName { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Stopped', 'Running',
        /// 'Pending', 'Error'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vm")]
        public VirtualMachine Vm { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "networks")]
        public IList<MachineNetwork> Networks { get; set; }

    }
}
