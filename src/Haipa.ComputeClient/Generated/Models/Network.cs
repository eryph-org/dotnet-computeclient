// <auto-generated>
// MIT
// </auto-generated>

namespace Haipa.ComputeClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Network
    {
        /// <summary>
        /// Initializes a new instance of the Network class.
        /// </summary>
        public Network()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Network class.
        /// </summary>
        public Network(string name, System.Guid? id = default(System.Guid?), long? vLanId = default(long?), IList<Subnet> subnets = default(IList<Subnet>), IList<AgentNetwork> agentNetworks = default(IList<AgentNetwork>))
        {
            Id = id;
            Name = name;
            VLanId = vLanId;
            Subnets = subnets;
            AgentNetworks = agentNetworks;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vLanId")]
        public long? VLanId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subnets")]
        public IList<Subnet> Subnets { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "agentNetworks")]
        public IList<AgentNetwork> AgentNetworks { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Subnets != null)
            {
                foreach (var element in Subnets)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (AgentNetworks != null)
            {
                foreach (var element1 in AgentNetworks)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
