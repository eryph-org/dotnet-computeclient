// <auto-generated>
// MIT
// </auto-generated>

namespace Haipa.ComputeClient.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class AgentNetwork
    {
        /// <summary>
        /// Initializes a new instance of the AgentNetwork class.
        /// </summary>
        public AgentNetwork()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AgentNetwork class.
        /// </summary>
        public AgentNetwork(Network network = default(Network), string agentName = default(string), System.Guid? networkId = default(System.Guid?), string virtualSwitchName = default(string), Agent agent = default(Agent))
        {
            Network = network;
            AgentName = agentName;
            NetworkId = networkId;
            VirtualSwitchName = virtualSwitchName;
            Agent = agent;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "network")]
        public Network Network { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "agentName")]
        public string AgentName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "networkId")]
        public System.Guid? NetworkId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "virtualSwitchName")]
        public string VirtualSwitchName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "agent")]
        public Agent Agent { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Network != null)
            {
                Network.Validate();
            }
        }
    }
}
